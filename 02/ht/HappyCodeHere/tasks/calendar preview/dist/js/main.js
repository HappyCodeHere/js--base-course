"use strict";function handleButtonClick(){event.preventDefault();var e=void 0,t=void 0,n=void 0,d=void 0,s=void 0,o=void 0;e=document.getElementById("calendar-id").value||"123",t=document.getElementById("change-date").checked,n=document.getElementById("add-events").checked,d=document.getElementById("delete-events").checked,s=document.getElementById("classes").value||"",o=document.getElementById("title").value||"";var a=document.querySelector(".calendar-show");a&&a.remove();var c=document.createElement("div");c.className="calendar-show",c.id=e,document.body.appendChild(c),new Calendar({el:"#"+e,showControls:t,allowAddEvents:n,allowRemoveEvents:d,className:s,title:o}).run();var l='\n  <!-- Bootstrap -->\n  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">\n\n  <!-- Styles -->\n  <link rel="stylesheet" href="https://rawgit.com/HappyCodeHere/js--base-course/02/02/ht/HappyCodeHere/tasks/calendar/dist/css/main.css">\n\n  <!-- Calendar widget -->\n  <script src="https://rawgit.com/HappyCodeHere/js--base-course/02/02/ht/HappyCodeHere/tasks/calendar/dist/js/main.js"></script>\n\n  <!-- Calendar settings -->\n  <script>\n    (function() {\n      var div = document.createElement(\'div\');\n      div.id = '+e+";\n      document.body.appendChild(div);\n\n      new Calendar({\n        el: '#' + '"+e+"',\n        showControls: "+t+",\n        allowAddEvents: "+n+",\n        allowRemoveEvents: "+d+",\n        className: '"+s+"',\n        title: '"+o+"'\n      }).run();\n    })();\n  </script>\n  ",r=document.getElementById("copy-code");r.innerText=l,r.focus(),r.select()}var button=document.querySelector("button");button.addEventListener("click",handleButtonClick);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiaGFuZGxlQnV0dG9uQ2xpY2siLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwiaWQiLCJzaG93Q29udHJvbHMiLCJhbGxvd0FkZEV2ZW50cyIsImFsbG93UmVtb3ZlRXZlbnRzIiwiY2xhc3NOYW1lIiwidGl0bGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidmFsdWUiLCJjaGVja2VkIiwiY2FsZW5kYXJTaG93IiwicXVlcnlTZWxlY3RvciIsInJlbW92ZSIsImRpdiIsImNyZWF0ZUVsZW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJDYWxlbmRhciIsImVsIiwicnVuIiwidGV4dCIsImNvcHkiLCJpbm5lclRleHQiLCJmb2N1cyIsInNlbGVjdCIsImJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiJBQUFBLFlBT0EsU0FBU0EscUJBQ1BDLE1BQU1DLGdCQUVOLElBQUlDLEdBQUFBLE9BQUlDLEVBQUFBLE9BQWNDLEVBQUFBLE9BQWdCQyxFQUFBQSxPQUFtQkMsRUFBQUEsT0FBV0MsRUFBQUEsTUFFcEVMLEdBQUtNLFNBQVNDLGVBQWUsZUFBZUMsT0FBUyxNQUNyRFAsRUFBZUssU0FBU0MsZUFBZSxlQUFlRSxRQUN0RFAsRUFBaUJJLFNBQVNDLGVBQWUsY0FBY0UsUUFDdkROLEVBQW9CRyxTQUFTQyxlQUFlLGlCQUFpQkUsUUFDN0RMLEVBQVlFLFNBQVNDLGVBQWUsV0FBV0MsT0FBUyxHQUV4REgsRUFBUUMsU0FBU0MsZUFBZSxTQUFTQyxPQUFTLEVBS2xELElBQUlFLEdBQWVKLFNBQVNLLGNBQWMsaUJBQ3RDRCxJQUNGQSxFQUFhRSxRQUdmLElBQUlDLEdBQU1QLFNBQVNRLGNBQWMsTUFDakNELEdBQUlULFVBQVksZ0JBQ2hCUyxFQUFJYixHQUFLQSxFQUNUTSxTQUFTUyxLQUFLQyxZQUFZSCxHQUUxQixHQUFJSSxXQUNGQyxHQUFJLElBQU1sQixFQUNWQyxhQUFjQSxFQUNkQyxlQUFnQkEsRUFDaEJDLGtCQUFtQkEsRUFDbkJDLFVBQVdBLEVBQ1hDLE1BQU9BLElBQ05jLEtBSUgsSUFBSUMsR0FBQUEsK3FCQWNXcEIsRUFkWCx3RkFrQmVBLEVBbEJmLDZCQW1Ca0JDLEVBbkJsQiw4QkFvQm9CQyxFQXBCcEIsaUNBcUJ1QkMsRUFyQnZCLDBCQXNCZ0JDLEVBdEJoQix1QkF1QllDLEVBdkJaLGlEQTZCQWdCLEVBQU9mLFNBQVNDLGVBQWUsWUFFbkNjLEdBQUtDLFVBQVlGLEVBQ2pCQyxFQUFLRSxRQUNMRixFQUFLRyxTQTFFUCxHQUFJQyxRQUFTbkIsU0FBU0ssY0FBYyxTQUNwQ2MsUUFBT0MsaUJBQWlCLFFBQVM3QiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdmFyIHVybCA9ICdodHRwczovL2Nkbi5yYXdnaXQuY29tL0hhcHB5Q29kZUhlcmUvanMtLWJhc2UtY291cnNlLzAyLzAyL2h0L0hhcHB5Q29kZUhlcmUvdGFza3MvY2FsZW5kYXIvYnVpbGRSYXdHaXQvaW5kZXguaHRtbCc7XHJcbi8vIHZhciBuZXdVcmwgPSAnJztcclxuXHJcbnZhciBidXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdidXR0b24nKTtcclxuYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQnV0dG9uQ2xpY2spO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUJ1dHRvbkNsaWNrKCkge1xyXG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gIGxldCBpZCwgc2hvd0NvbnRyb2xzLCBhbGxvd0FkZEV2ZW50cywgYWxsb3dSZW1vdmVFdmVudHMsIGNsYXNzTmFtZSwgdGl0bGU7XHJcblxyXG4gIGlkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbGVuZGFyLWlkJykudmFsdWUgfHwgJzEyMyc7XHJcbiAgc2hvd0NvbnRyb2xzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYW5nZS1kYXRlJykuY2hlY2tlZDtcclxuICBhbGxvd0FkZEV2ZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGQtZXZlbnRzJykuY2hlY2tlZDtcclxuICBhbGxvd1JlbW92ZUV2ZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZWxldGUtZXZlbnRzJykuY2hlY2tlZDtcclxuICBjbGFzc05hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xhc3NlcycpLnZhbHVlIHx8ICcnO1xyXG5cclxuICB0aXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aXRsZScpLnZhbHVlIHx8ICcnO1xyXG5cclxuICAvLyBuZXdVcmwgPSBgJHt1cmx9P2lkPSR7aWR9JnNob3dDb250cm9scz0ke3Nob3dDb250cm9sc30mYWxsb3dBZGRFdmVudHM9JHthbGxvd0FkZEV2ZW50c30mYWxsb3dSZW1vdmVFdmVudHM9JHthbGxvd1JlbW92ZUV2ZW50c30mY2xhc3NOYW1lPSR7Y2xhc3NOYW1lfSZ0aXRsZT0ke3RpdGxlfWA7XHJcblxyXG5cclxuICB2YXIgY2FsZW5kYXJTaG93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbGVuZGFyLXNob3cnKTtcclxuICBpZiAoY2FsZW5kYXJTaG93KSB7XHJcbiAgICBjYWxlbmRhclNob3cucmVtb3ZlKCk7XHJcbiAgfVxyXG5cclxuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgZGl2LmNsYXNzTmFtZSA9ICdjYWxlbmRhci1zaG93JztcclxuICBkaXYuaWQgPSBpZDtcclxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XHJcblxyXG4gIG5ldyBDYWxlbmRhcih7XHJcbiAgICBlbDogJyMnICsgaWQsXHJcbiAgICBzaG93Q29udHJvbHM6IHNob3dDb250cm9scyxcclxuICAgIGFsbG93QWRkRXZlbnRzOiBhbGxvd0FkZEV2ZW50cyxcclxuICAgIGFsbG93UmVtb3ZlRXZlbnRzOiBhbGxvd1JlbW92ZUV2ZW50cyxcclxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxyXG4gICAgdGl0bGU6IHRpdGxlXHJcbiAgfSkucnVuKCk7XHJcblxyXG5cclxuXHJcbiAgdmFyIHRleHQgPSBgXHJcbiAgPCEtLSBCb290c3RyYXAgLS0+XHJcbiAgPGxpbmsgaHJlZj1cImh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzMuMy43L2Nzcy9ib290c3RyYXAubWluLmNzc1wiIHJlbD1cInN0eWxlc2hlZXRcIiBpbnRlZ3JpdHk9XCJzaGEzODQtQlZZaWlTSUZlSzFkR21KUkFreWN1SEFIUmczMk9tVWN3dzdvbjNSWWRnNFZhK1BtU1Rzei9LNjh2YmRFamg0dVwiIGNyb3Nzb3JpZ2luPVwiYW5vbnltb3VzXCI+XHJcblxyXG4gIDwhLS0gU3R5bGVzIC0tPlxyXG4gIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiaHR0cHM6Ly9yYXdnaXQuY29tL0hhcHB5Q29kZUhlcmUvanMtLWJhc2UtY291cnNlLzAyLzAyL2h0L0hhcHB5Q29kZUhlcmUvdGFza3MvY2FsZW5kYXIvZGlzdC9jc3MvbWFpbi5jc3NcIj5cclxuXHJcbiAgPCEtLSBDYWxlbmRhciB3aWRnZXQgLS0+XHJcbiAgPHNjcmlwdCBzcmM9XCJodHRwczovL3Jhd2dpdC5jb20vSGFwcHlDb2RlSGVyZS9qcy0tYmFzZS1jb3Vyc2UvMDIvMDIvaHQvSGFwcHlDb2RlSGVyZS90YXNrcy9jYWxlbmRhci9kaXN0L2pzL21haW4uanNcIj48L3NjcmlwdD5cclxuXHJcbiAgPCEtLSBDYWxlbmRhciBzZXR0aW5ncyAtLT5cclxuICA8c2NyaXB0PlxyXG4gICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIGRpdi5pZCA9ICR7aWR9O1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XHJcblxyXG4gICAgICBuZXcgQ2FsZW5kYXIoe1xyXG4gICAgICAgIGVsOiAnIycgKyAnJHtpZH0nLFxyXG4gICAgICAgIHNob3dDb250cm9sczogJHtzaG93Q29udHJvbHN9LFxyXG4gICAgICAgIGFsbG93QWRkRXZlbnRzOiAke2FsbG93QWRkRXZlbnRzfSxcclxuICAgICAgICBhbGxvd1JlbW92ZUV2ZW50czogJHthbGxvd1JlbW92ZUV2ZW50c30sXHJcbiAgICAgICAgY2xhc3NOYW1lOiAnJHtjbGFzc05hbWV9JyxcclxuICAgICAgICB0aXRsZTogJyR7dGl0bGV9J1xyXG4gICAgICB9KS5ydW4oKTtcclxuICAgIH0pKCk7XHJcbiAgPC9zY3JpcHQ+XHJcbiAgYFxyXG5cclxuICB2YXIgY29weSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3B5LWNvZGUnKTtcclxuICAvLyBjb3B5LnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgY29weS5pbm5lclRleHQgPSB0ZXh0O1xyXG4gIGNvcHkuZm9jdXMoKTtcclxuICBjb3B5LnNlbGVjdCgpO1xyXG59Il19
